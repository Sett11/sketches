import os
import base64
from typing import Dict, Any
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
import sys
# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)
from mylogger import Logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = Logger('DOCUMENT_TRANSFORM_PIPELINE', 'logs/document_transform.log')

class DocumentTransformPipeline:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Pipeline –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM"""
    
    def __init__(self):
        logger.info("üöÄ Document Transform Pipeline –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def transform_document(self, file_data: str, filename: str, prompt: str) -> Dict[str, Any]:
        """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞: {filename}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
            os.makedirs("docs", exist_ok=True)
            os.makedirs("new_docs", exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            input_filename = f"{timestamp}_{filename}"
            input_path = f"docs/{input_filename}"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º file_data (–º–æ–∂–µ—Ç –±—ã—Ç—å base64 –∏–ª–∏ bytes)
            if isinstance(file_data, str):
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º base64
                file_bytes = base64.b64decode(file_data)
            else:
                file_bytes = file_data
            
            with open(input_path, 'wb') as f:
                f.write(file_bytes)
            
            logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {input_path}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º DocumentTransformPipeline
            try:
                from document_transform_pipeline import get_pipeline
                transform_pipeline = get_pipeline()
                if not transform_pipeline:
                    return {
                        "success": False,
                        "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å pipeline —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                    }
            except ImportError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DocumentTransformPipeline: {e}")
                return {
                    "success": False,
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"
                }
            
            # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            result = transform_pipeline.transform_document(input_path, prompt)
            
            if result.get("success"):
                # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                transformed_path = result["transformed_file"]
                with open(transformed_path, 'rb') as f:
                    transformed_data = f.read()
                
                # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
                transformed_base64 = base64.b64encode(transformed_data).decode('utf-8')
                
                return {
                    "success": True,
                    "transformed_file": transformed_base64,
                    "transformed_filename": os.path.basename(transformed_path),
                    "message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω"
                }
            else:
                return {
                    "success": False,
                    "error": result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Pipeline
pipeline = DocumentTransformPipeline()

def pipe(request: Dict[str, Any]) -> Dict[str, Any]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        action = request.get("action", "transform_document")
        data = request.get("data", {})
        
        logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {action}")
        
        if action == "transform_document":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            file_data = data.get("file_data")  # base64 –∏–ª–∏ multipart –¥–∞–Ω–Ω—ã–µ
            prompt = data.get("prompt", "")
            filename = data.get("filename", "document.docx")
            
            if not file_data:
                return {"error": "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"}
            
            if not prompt:
                return {"error": "–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–º—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"}
            
            result = pipeline.transform_document(file_data, filename, prompt)
            return {"action": action, "result": result}
        
        else:
            return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ: transform_document"}
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return {"error": str(e)}

def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ Document Transform Pipeline –∑–∞–ø—É—â–µ–Ω")
    logger.info("üìÅ –ü–∞–ø–∫–∏: docs/ (–≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã), new_docs/ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)")

def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë Document Transform Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")