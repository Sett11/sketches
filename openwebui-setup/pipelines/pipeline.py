"""
title: Document Transform Pipeline
author: open-webui
date: 2024-12-19
version: 1.0
license: MIT
description: A pipeline for transforming Word documents using LLM
requirements: python-docx, requests
"""

import os
import base64
from typing import Dict, Any, Union, Generator, Iterator, List
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
import sys
# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)
from mylogger import Logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = Logger('DOCUMENT_TRANSFORM_PIPELINE', 'logs/document_transform.log')

class Pipeline:
    def __init__(self):
        self.logger = Logger('DOCUMENT_TRANSFORM_PIPELINE', 'logs/document_transform.log')
        self.logger.info("üöÄ Document Transform Pipeline –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def on_startup(self):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info("üöÄ Document Transform Pipeline –∑–∞–ø—É—â–µ–Ω")
        self.logger.info("üìÅ –ü–∞–ø–∫–∏: docs/ (–≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã), new_docs/ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)")
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        os.makedirs("docs", exist_ok=True)
        os.makedirs("new_docs", exist_ok=True)

    async def on_shutdown(self):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info("üõë Document Transform Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def transform_document(self, file_data: str, filename: str, prompt: str) -> Dict[str, Any]:
        """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞: {filename}")
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–∑ base64
            if isinstance(file_data, str):
                file_bytes = base64.b64decode(file_data)
            else:
                file_bytes = file_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            input_path = f"docs/{datetime.now().strftime('%Y%m%d_%H%M%S')}_{filename}"
            with open(input_path, 'wb') as f:
                f.write(file_bytes)
            self.logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {input_path}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º DocumentTransformPipeline
            try:
                from document_transform_pipeline import get_pipeline
                transform_pipeline = get_pipeline()
                if not transform_pipeline:
                    return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å pipeline —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"}
            except ImportError as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DocumentTransformPipeline: {e}")
                return {"success": False, "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"}
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            result = transform_pipeline.transform_document(input_path, prompt)
            
            if result.get("success"):
                # –ß–∏—Ç–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ base64
                transformed_path = result["transformed_file"]
                with open(transformed_path, 'rb') as f:
                    transformed_data = f.read()
                transformed_base64 = base64.b64encode(transformed_data).decode('utf-8')
                
                return {
                    "success": True,
                    "transformed_file": transformed_base64,
                    "transformed_filename": os.path.basename(transformed_path),
                    "message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω"
                }
            else:
                return {"success": False, "error": result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")}
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {"success": False, "error": str(e)}

    def pipe(
        self, user_message: str, model_id: str, messages: List[dict], body: dict
    ) -> Union[str, Generator, Iterator]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É OpenWebUI Pipelines
        """
        try:
            self.logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_message}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ body
            file_data = body.get("file_data")
            prompt = body.get("prompt", user_message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_message –∫–∞–∫ –ø—Ä–æ–º—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            filename = body.get("filename", "document.docx")
            
            if not file_data:
                return "‚ùå –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            
            if not prompt:
                return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–º—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            result = self.transform_document(file_data, filename, prompt)
            
            if result.get("success"):
                return f"‚úÖ {result.get('message', '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω')}"
            else:
                return f"‚ùå {result.get('error', '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏')}"
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"