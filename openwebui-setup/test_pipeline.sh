#!/bin/bash

echo "üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DOCUMENT TRANSFORM PIPELINE"
echo "=========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Ö–æ—Å—Ç–µ
if [ -f "/app/backend/main.py" ]; then
    error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∞ —Ö–æ—Å—Ç–µ, –∞ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!"
    exit 1
fi

log "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Document Transform Pipeline..."

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º Docker..."
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi
success "Docker –¥–æ—Å—Ç—É–ø–µ–Ω"

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
CONTAINERS=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(open-webui|pipelines)")

if echo "$CONTAINERS" | grep -q "open-webui"; then
    success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä open-webui –∑–∞–ø—É—â–µ–Ω"
else
    error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä open-webui –ù–ï –∑–∞–ø—É—â–µ–Ω!"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d"
    exit 1
fi

if echo "$CONTAINERS" | grep -q "pipelines"; then
    success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä pipelines –∑–∞–ø—É—â–µ–Ω"
else
    error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä pipelines –ù–ï –∑–∞–ø—É—â–µ–Ω!"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d"
    exit 1
fi

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Pipelines API
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Pipelines API..."
if curl -s -H "Authorization: Bearer 0p3n-w3bu!" http://localhost:9099/v1/ > /dev/null 2>&1; then
    success "Pipelines API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    error "Pipelines API –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä pipelines –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ—Ä—Ç 9099 –æ—Ç–∫—Ä—ã—Ç"
    exit 1
fi

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏..."
MODELS_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -H "Authorization: Bearer 0p3n-w3bu!" \
    http://localhost:9099/v1/models 2>/dev/null)

MODELS_STATUS=$(echo $MODELS_RESPONSE | sed -e "s/.*HTTPSTATUS://")
MODELS_BODY=$(echo $MODELS_RESPONSE | sed -e "s/HTTPSTATUS:.*//g")

if [ "$MODELS_STATUS" = "200" ]; then
    success "–ú–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã (—Å—Ç–∞—Ç—É—Å: $MODELS_STATUS)"
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
    echo "$MODELS_BODY" | jq -r '.data[] | "  - \(.id) (\(.name))"' 2>/dev/null || echo "$MODELS_BODY" | head -c 300
    echo "..."
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    log "–ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –º–æ–¥–µ–ª–∏..."
    AVAILABLE_MODEL=$(echo "$MODELS_BODY" | jq -r '.data[0].id' 2>/dev/null)
    log "–†–µ–∑—É–ª—å—Ç–∞—Ç jq: '$AVAILABLE_MODEL'"
    
    if [ "$AVAILABLE_MODEL" != "null" ] && [ -n "$AVAILABLE_MODEL" ]; then
        log "–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: $AVAILABLE_MODEL"
    else
        # –ï—Å–ª–∏ jq –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä—É—á–Ω—É—é
        log "jq –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä—É—á–Ω—É—é..."
        AVAILABLE_MODEL=$(echo "$MODELS_BODY" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
        log "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: '$AVAILABLE_MODEL'"
        
        if [ -n "$AVAILABLE_MODEL" ]; then
            log "–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å (–∏–∑–≤–ª–µ—á–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é): $AVAILABLE_MODEL"
        else
            error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å"
            echo "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:"
            echo "$MODELS_BODY"
            echo ""
            echo "–ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±..."
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            AVAILABLE_MODEL="transform_doc"  # –ú–æ–¥–µ–ª—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è transform_doc
            log "–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $AVAILABLE_MODEL"
        fi
    fi
else
    error "–ú–æ–¥–µ–ª–∏ –ù–ï –¥–æ—Å—Ç—É–ø–Ω—ã (—Å—Ç–∞—Ç—É—Å: $MODELS_STATUS)"
    echo "–û—Ç–≤–µ—Ç: $MODELS_BODY"
    exit 1
fi

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É pipeline –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É pipeline –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ pipelines..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª transform_doc.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if docker exec pipelines ls -la /app/custom_pipelines/transform_doc.py > /dev/null 2>&1; then
    success "–§–∞–π–ª transform_doc.py –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
else
    error "–§–∞–π–ª transform_doc.py –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!"
    echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ /app/custom_pipelines/:"
    docker exec pipelines ls -la /app/custom_pipelines/
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç pipeline
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç pipeline..."
PIPELINE_TEST=$(docker exec pipelines python3 -c "
import sys
sys.path.append('/app/custom_pipelines')
try:
    from transform_doc import Pipeline
    print('‚úÖ Pipeline –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è')
    p = Pipeline()
    print('‚úÖ Pipeline —Å–æ–∑–¥–∞–µ—Ç—Å—è')
    print('SUCCESS')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    print('ERROR')
" 2>/dev/null)

if echo "$PIPELINE_TEST" | grep -q "SUCCESS"; then
    success "Pipeline –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è"
else
    error "Pipeline –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è"
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:"
    echo "$PIPELINE_TEST"
    exit 1
fi

# 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –∑–∞–ø—Ä–æ—Å
log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –∑–∞–ø—Ä–æ—Å..."

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏
cat > /tmp/api_test.json << APIEOF
{
    "model": "$AVAILABLE_MODEL",
    "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}],
    "stream": false
}
APIEOF

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
log "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π JSON:"
cat /tmp/api_test.json
echo ""

API_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer 0p3n-w3bu!" \
    -X POST \
    -d @/tmp/api_test.json \
    http://localhost:9099/v1/chat/completions 2>/dev/null)

API_STATUS=$(echo $API_RESPONSE | sed -e "s/.*HTTPSTATUS://")
API_BODY=$(echo $API_RESPONSE | sed -e "s/HTTPSTATUS:.*//g")

if [ "$API_STATUS" = "200" ]; then
    success "API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: $API_STATUS)"
    echo "–û—Ç–≤–µ—Ç API:"
    echo "$API_BODY" | jq -r '.choices[0].message.content' 2>/dev/null || echo "$API_BODY" | head -c 200
    echo "..."
else
    error "API –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: $API_STATUS)"
    echo "–û—Ç–≤–µ—Ç: $API_BODY"
fi

# 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∞–π–ª–æ–º (–µ—Å–ª–∏ —ç—Ç–æ Document Transform Pipeline)
log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞..."

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Word –¥–æ–∫—É–º–µ–Ω—Ç
python3 -c "
from docx import Document
doc = Document()
doc.add_paragraph('Hello World Test Document')
doc.save('/tmp/test.docx')
print('Word –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω')
" 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Word –¥–æ–∫—É–º–µ–Ω—Ç"

# –ö–æ–¥–∏—Ä—É–µ–º Word –¥–æ–∫—É–º–µ–Ω—Ç –≤ base64
base64 -w 0 /tmp/test.docx > /tmp/test_base64.txt
FILE_DATA=$(cat /tmp/test_base64.txt)

# –°–æ–∑–¥–∞–µ–º JSON —Å —Ñ–∞–π–ª–æ–º
cat > /tmp/file_test.json << FILEEOF
{
    "model": "$AVAILABLE_MODEL",
    "messages": [{"role": "user", "content": "–û–±—Ä–∞–±–æ—Ç–∞–π –¥–æ–∫—É–º–µ–Ω—Ç"}],
    "file_data": "$FILE_DATA",
    "prompt": "–î–æ–±–∞–≤—å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –≤ –∫–æ–Ω–µ—Ü",
    "filename": "test.docx",
    "stream": false
}
FILEEOF

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
log "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π JSON –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:"
cat /tmp/file_test.json
echo ""

FILE_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer 0p3n-w3bu!" \
    -X POST \
    -d @/tmp/file_test.json \
    http://localhost:9099/v1/chat/completions 2>/dev/null)

FILE_STATUS=$(echo $FILE_RESPONSE | sed -e "s/.*HTTPSTATUS://")
FILE_BODY=$(echo $FILE_RESPONSE | sed -e "s/HTTPSTATUS:.*//g")

if [ "$FILE_STATUS" = "200" ]; then
    success "–ó–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: $FILE_STATUS)"
    echo "–û—Ç–≤–µ—Ç —Å —Ñ–∞–π–ª–æ–º:"
    echo "$FILE_BODY" | jq -r '.choices[0].message.content' 2>/dev/null || echo "$FILE_BODY" | head -c 200
    echo "..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ docs
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ docs:"
    docker exec pipelines ls -la /app/docs/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ docs –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:"
    docker exec pipelines cat /app/docs/20250928_203320_test.txt 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏:"
    docker exec pipelines ls -la /app/docs/20250928_203320_test.txt 2>/dev/null || echo "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É:"
    docker exec pipelines stat /app/docs/20250928_203320_test.txt 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ new_docs
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ new_docs:"
    docker exec pipelines ls -la /app/new_docs/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ new_docs –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É:"
    docker exec pipelines ls -la /app/docs/20250928_202741_test.txt 2>/dev/null || echo "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
else
    warning "–ó–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–æ–º –Ω–µ—É–¥–∞—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: $FILE_STATUS)"
    echo "–û—Ç–≤–µ—Ç: $FILE_BODY"
fi

# 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏..."
echo "=== –õ–û–ì–ò PIPELINES (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫) ==="
docker logs --tail 10 pipelines 2>/dev/null | grep -i error || echo "–û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö pipelines –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

# 9. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo ""
echo "======================================"
echo "üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
echo "======================================"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(open-webui|pipelines)"

echo ""
echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:"

if echo "$PIPELINE_TEST" | grep -q "SUCCESS"; then
    success "‚úÖ Pipeline –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è"
else
    error "‚ùå Pipeline –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è"
fi

if [ "$MODELS_STATUS" = "200" ]; then
    success "‚úÖ –ú–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
else
    error "‚ùå –ú–æ–¥–µ–ª–∏ –ù–ï –¥–æ—Å—Ç—É–ø–Ω—ã"
fi

if [ "$API_STATUS" = "200" ]; then
    success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    error "‚ùå API –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

if [ "$FILE_STATUS" = "200" ]; then
    success "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    warning "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"
fi

echo ""
echo "üîß –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò:"
echo "docker logs -f pipelines          # –õ–æ–≥–∏ pipelines –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
echo "docker logs -f open-webui         # –õ–æ–≥–∏ open-webui –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
echo "docker exec -it pipelines bash    # –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä pipelines"
echo "docker exec -it open-webui bash   # –í–æ–π—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä open-webui"
echo "docker-compose restart pipelines  # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å pipelines"
echo "docker-compose restart open-webui  # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å open-webui"

echo ""
echo "üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:"
echo "=================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Pipelines API
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Pipelines API..."
curl -s -H "Authorization: Bearer 0p3n-w3bu!" http://localhost:9099/v1/ | head -c 200
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º pipelines endpoint
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º pipelines endpoint..."
curl -s -H "Authorization: Bearer 0p3n-w3bu!" http://localhost:9099/pipelines | head -c 200
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º valves spec –¥–ª—è pipeline
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º valves spec –¥–ª—è pipeline..."
curl -s -H "Authorization: Bearer 0p3n-w3bu!" http://localhost:9099/pipeline/valves/spec | head -c 200
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ pipelines –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ pipelines –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫..."
docker logs pipelines 2>&1 | grep -i error | tail -5 || echo "–û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ pipelines
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ pipelines..."
docker exec pipelines env | grep -E "(OPENROUTER|MODEL|PIPELINES)" || echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –≤ pipelines
log "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –≤ pipelines:"
docker exec pipelines ls -la /app/custom_pipelines/

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ docs –∏ new_docs
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ docs –∏ new_docs:"
docker exec pipelines ls -la /app/docs/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ docs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
docker exec pipelines ls -la /app/new_docs/ 2>/dev/null || echo "–ü–∞–ø–∫–∞ new_docs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
log "–°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ docs –∏ new_docs:"
docker exec pipelines mkdir -p /app/docs /app/new_docs
docker exec pipelines ls -la /app/ | grep -E "(docs|new_docs)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç pipeline –≤—Ä—É—á–Ω—É—é
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç pipeline –≤—Ä—É—á–Ω—É—é..."
docker exec pipelines python3 -c "
import sys
sys.path.append('/app/custom_pipelines')
try:
    from transform_doc import Pipeline
    print('‚úÖ Pipeline –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è')
    p = Pipeline()
    print('‚úÖ Pipeline —Å–æ–∑–¥–∞–µ—Ç—Å—è')
    print('‚úÖ Pipeline –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    result = p.pipe('–¢–µ—Å—Ç', 'transform_doc', [{'role': 'user', 'content': '–¢–µ—Å—Ç'}], {})
    print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {result}')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Word –¥–æ–∫—É–º–µ–Ω—Ç
    from docx import Document
    doc = Document()
    doc.add_paragraph('Hello World Test Document')
    doc.save('/tmp/test_internal.docx')
    print('Word –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∞')
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    import base64
    with open('/tmp/test_internal.docx', 'rb') as f:
        test_file_data = base64.b64encode(f.read()).decode('utf-8')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∞–π–ª–æ–º
    result_with_file = p.pipe('–û–±—Ä–∞–±–æ—Ç–∞–π –¥–æ–∫—É–º–µ–Ω—Ç', 'transform_doc', [{'role': 'user', 'content': '–û–±—Ä–∞–±–æ—Ç–∞–π –¥–æ–∫—É–º–µ–Ω—Ç'}], {
        'file_data': test_file_data,
        'prompt': '–î–æ–±–∞–≤—å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –≤ –∫–æ–Ω–µ—Ü',
        'filename': 'test.docx'
    })
    print(f'‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ñ–∞–π–ª–æ–º: {result_with_file}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å —Ñ–∞–π–ª–æ–º –≤ Python
    import os
    test_file_path = '/app/docs/20250928_203320_test.txt'
    print(f'–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {test_file_path}')
    print(f'–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(test_file_path)}')
    if os.path.exists(test_file_path):
        print(f'–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(test_file_path)} –±–∞–π—Ç')
        with open(test_file_path, 'r') as f:
            content = f.read()
            print(f'–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {repr(content)}')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    import traceback
    traceback.print_exc()
"

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
rm -f /tmp/api_test.json /tmp/file_test.json /tmp/test.txt /tmp/test_base64.txt

log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"