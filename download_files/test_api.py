#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ö–ê–î–† –ê—Ä–±–∏—Ç—Ä
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
–ó–∞–ø—É—Å–∫: python test_api.py
"""
import requests
import json
from datetime import datetime, timedelta

API_KEY = "997834c96856bb3783da8c42a59d06b3"
API_URL = "https://service.api-assist.com/parser/ras_arbitr_api/"
STAT_URL = "https://service.api-assist.com/stat/"

def test_limits():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API"""
    print("=" * 60)
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ API")
    print("=" * 60)
    
    try:
        url = f"{STAT_URL}?key={API_KEY}"
        print(f"URL: {url}")
        
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        print("\n‚úÖ –û—Ç–≤–µ—Ç API (–ª–∏–º–∏—Ç—ã):")
        print(json.dumps(data, ensure_ascii=False, indent=2))
        
        return True
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_metadata():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 60)
    print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        
        url = (f"{API_URL}?key={API_KEY}"
               f"&DateFrom={yesterday}&DateTo={yesterday}"
               f"&Page=1&Text='—Ä–µ—à–µ–Ω–∏–µ'")
        
        print(f"URL: {url}")
        print(f"–î–∞—Ç–∞: {yesterday}")
        
        response = requests.get(url, timeout=60)
        response.raise_for_status()
        
        data = response.json()
        
        print("\n‚úÖ –û—Ç–≤–µ—Ç API (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ):")
        print(f"–ö–ª—é—á–∏ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
        
        if 'items' in data:
            items = data['items']
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ items: {len(items)}")
            
            if items:
                print("\nüìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ item:")
                first_item = items[0]
                print(json.dumps(first_item, ensure_ascii=False, indent=2)[:1000])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:")
                fields_to_check = [
                    'CaseNumber', 'CaseId', 'Type', 'InstanceLevel', 
                    'ContentTypes', 'FileUrl', 'FileName', 'Court', 'RegistrationDate'
                ]
                for field in fields_to_check:
                    if field in first_item:
                        value = first_item[field]
                        print(f"  ‚úì {field}: {type(value).__name__} = {str(value)[:150]}")
                    else:
                        print(f"  ‚úó {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ FileUrl
                if 'FileUrl' in first_item:
                    print(f"\n‚úÖ FileUrl –Ω–∞–π–¥–µ–Ω! –≠—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF:")
                    print(f"   {first_item['FileUrl']}")
                else:
                    print(f"\n‚ö†Ô∏è FileUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É API.")
        else:
            print("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–ª—è 'items'")
            print(json.dumps(data, ensure_ascii=False, indent=2)[:500])
        
        if 'pages' in data:
            print(f"\nüìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {data['pages']}")
        
        return True
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("\nüî¨ –¢–ï–°–¢ API –ö–ê–î–† –ê–†–ë–ò–¢–†")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ª–∏–º–∏—Ç—ã
    limits_ok = test_limits()
    
    # –¢–µ—Å—Ç 2: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata_ok = test_metadata()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    print("=" * 60)
    print(f"–õ–∏–º–∏—Ç—ã API: {'‚úÖ OK' if limits_ok else '‚ùå FAIL'}")
    print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {'‚úÖ OK' if metadata_ok else '‚ùå FAIL'}")
    
    if limits_ok and metadata_ok:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∏–ª–∏ –∫–ª—é—á.")

if __name__ == "__main__":
    main()

