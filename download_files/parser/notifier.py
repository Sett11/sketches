"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –±–æ—Ç
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ö–∞–Ω–∏–∑–º —á–µ—Ä–µ–∑ JSON —Ñ–∞–π–ª
"""
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Optional

from config import Config

logger = logging.getLogger(__name__)


class Notifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ—Ç—É"""
    
    def __init__(self):
        self.notification_file = Config.STATE_DIR / "notifications.json"
    
    def send(self, message: str, level: str = "info"):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        Args:
            message: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            level: —É—Ä–æ–≤–µ–Ω—å (info, warning, error, success)
        """
        try:
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            emoji_map = {
                'info': '‚ÑπÔ∏è',
                'warning': '‚ö†Ô∏è',
                'error': '‚ùå',
                'success': '‚úÖ',
                'start': 'üöÄ',
                'finish': 'üèÅ',
                'stats': 'üìä'
            }
            
            emoji = emoji_map.get(level, '‚ÑπÔ∏è')
            formatted_message = f"{emoji} {message}"
            
            notification = {
                "timestamp": datetime.now().isoformat(),
                "message": formatted_message,
                "level": level
            }
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª (–±–æ—Ç –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å)
            with open(self.notification_file, 'w', encoding='utf-8') as f:
                json.dump(notification, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def send_start(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.send("–ü–∞—Ä—Å–µ—Ä –ö–ê–î–† –ê—Ä–±–∏—Ç—Ä –∑–∞–ø—É—â–µ–Ω", level="start")
    
    def send_finish(self, stats: dict):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        
        Args:
            stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã {
                'metadata_items': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö,
                'pdfs_downloaded': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö PDF,
                'errors': –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫,
                'requests_used': –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤,
                'duration': –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            }
        """
        duration_min = round(stats.get('duration', 0) / 60, 1)
        
        message = (
            f"–ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—Ä–∞–Ω–æ: {stats.get('metadata_items', 0)}\n"
            f"‚Ä¢ PDF —Å–∫–∞—á–∞–Ω–æ: {stats.get('pdfs_downloaded', 0)}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.get('errors', 0)}\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats.get('requests_used', 0)}\n"
            f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {duration_min} –º–∏–Ω"
        )
        
        level = "success" if stats.get('errors', 0) == 0 else "warning"
        self.send(message, level=level)
    
    def send_error(self, error_text: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.send(f"–û–®–ò–ë–ö–ê: {error_text}", level="error")
    
    def send_limits_info(self, limits: dict):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö API
        
        Args:
            limits: {'limit': –æ–±—â–∏–π –ª–∏–º–∏—Ç, 'used': –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, 'remaining': –æ—Å—Ç–∞—Ç–æ–∫}
        """
        message = (
            f"–õ–∏–º–∏—Ç—ã API:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {limits.get('limit', 0)}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {limits.get('used', 0)}\n"
            f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {limits.get('remaining', 0)}"
        )
        self.send(message, level="info")
    
    def send_progress(self, message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        self.send(message, level="info")

